@{
    ViewData["Title"] = "Listado de Tareas";
}

<div class="text-center">
    <h1 class="display-4">Mis Tareas</h1>
    <button type="button" class="btn btn-outline-primary mb-3" onclick="addNewtaskToList()">
        Agregar nueva tarea
    </button>
</div>

<div id="container-list-tasks" class="text-center">
    <div id="rearrange" class="text-start" data-bind="foreach: tasks">
        <div name="task" class="border mb-2 p-2" style="cursor: pointer" data-bind="click: handleClickTask">
            <div data-bind="text: title, hidden: isNew" class="fw-bold">
            </div>

            <div name="steps-resume" data-bind="{visible: stepsTotal() > 0}">
                <span data-bind="text: stepsTaken"></span>/<span data-bind="text: stepsTotal"></span>
                <span data-bind="text: percentComplete"></span>
            </div>

            <input type="text" name="title-task" autocomplete="off"
                   data-bind="value: title, visible: isNew, attr: {'data-id': id}, event: {focusout: handleFocusTitletask}" />
        </div>
    </div>

    <div data-bind="visible: spinnerLoading" class="spinner-border">
        <span class="visually-hidden">Cargando....</span>
    </div>

    <div data-bind="visible: noTasks">
        No hay tareas para mostrar!
    </div>
</div>

<partial name="_ModalEditTask" />

@section Scripts {

    <script src="~/js/utility.js"></script>
    <script src="~/js/tasks.js" asp-append-version="true"></script>
    <script src="~/js/steps.js" asp-append-version="true"></script>

    <script>
        const url = '/api/tasks';
        const urlSteps = '/api/steps';

        const modalEditTask = document.getElementById("modal-edit-task");
        const modalEditTaskBootstrap = new bootstrap.Modal(modalEditTask);

        function taskListViewModelFn() {
            var self = this;
            self.tasks = ko.observableArray([]);
            self.spinnerLoading = ko.observable(true);


            self.noTasks = ko.pureComputed(function () {
                if (self.spinnerLoading())
                    return false;

                return self.tasks().length === 0;
            })

        }

        function taskElementListViewModel({ id, title, stepsTotal, stepsTaken }) {
            var self = this;
            self.id = ko.observable(id);
            self.title = ko.observable(title);

            self.stepsTotal = ko.observable(stepsTotal);
            self.stepsTaken = ko.observable(stepsTaken);

            console.log('total pasos', stepsTotal)
            console.log('total realizados', stepsTaken)

            self.isNew = ko.pureComputed(() => self.id() == 0);

            self.percentComplete = ko.pureComputed(() => {
                const calculo = Math.round(self.stepsTaken() * 1.0 / self.stepsTotal() * 100);

                return `(${calculo}%)`;
            })
        }

        const taskEditVM = {
            id: 0,
            title: ko.observable(''),
            description: ko.observable(''),
            steps: ko.observableArray([]),
        }

        const taskListViewModel = new taskListViewModelFn();

        function stepViewModel({ id, description, done, modeEdit }) {
            var self = this;
            self.id = ko.observable(id || 0);
            self.description = ko.observable(description || '');
            self.previousDescription = '';
            self.done = ko.observable(done);
            self.modeEdit = ko.observable(modeEdit);

            self.isNew = ko.pureComputed(() => self.id() == 0);
        }

        //const taskListViewModel = {
        //    tasks: ko.observableArray([]),
        //    spinnerLoading: ko.observable(true)
        //}

        //setTimeout(() => {
        //taskListViewModel.tasks.push({ title: "Tarea 1" });
        //taskListViewModel.spinnerLoading(false);
        //}, 100)

        getTasks();

        ko.applyBindings(taskListViewModel, document.getElementById("container-list-tasks"));

        ko.applyBindings(taskEditVM, document.getElementById('modal-edit-task'));</script>


}


